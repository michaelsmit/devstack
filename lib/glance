# lib/glance
# Functions to control the configuration and operation of the Glance service

# Dependencies:
# ``functions`` file
# ``DEST``, ``DATA_DIR`` must be defined
# ``SERVICE_{TENANT_NAME|PASSWORD}`` must be defined
# ``SERVICE_HOST``

# ``stack.sh`` calls the entry points in this order:
#
# install_glance
# configure_glance
# init_glance
# start_glance
# stop_glance
# cleanup_glance

# Save trace setting
XTRACE=$(set +o | grep xtrace)
set +o xtrace


# Defaults
# --------

# <define global variables here that belong to this project>

# Set up default directories
GLANCE_DIR=$DEST/glance
GLANCECLIENT_DIR=$DEST/python-glanceclient
GLANCE_CACHE_DIR=${GLANCE_CACHE_DIR:=$DATA_DIR/glance/cache}
GLANCE_IMAGE_DIR=${GLANCE_IMAGE_DIR:=$DATA_DIR/glance/images}

GLANCE_CONF_DIR=${GLANCE_CONF_DIR:-/etc/glance}
GLANCE_REGISTRY_CONF=$GLANCE_CONF_DIR/glance-registry.conf
GLANCE_API_CONF=$GLANCE_CONF_DIR/glance-api.conf
GLANCE_REGISTRY_PASTE_INI=$GLANCE_CONF_DIR/glance-registry-paste.ini
GLANCE_API_PASTE_INI=$GLANCE_CONF_DIR/glance-api-paste.ini
GLANCE_CACHE_CONF=$GLANCE_CONF_DIR/glance-cache.conf
GLANCE_POLICY_JSON=$GLANCE_CONF_DIR/policy.json

# Support entry points installation of console scripts
if [[ -d $GLANCE_DIR/bin ]]; then
    GLANCE_BIN_DIR=$GLANCE_DIR/bin
else
    GLANCE_BIN_DIR=/usr/local/bin
fi

# Glance connection info.  Note the port must be specified.
GLANCE_HOSTPORT=${GLANCE_HOSTPORT:-$SERVICE_HOST:9292}


# Entry Points
# ------------

# cleanup_glance() - Remove residual data files, anything left over from previous
# runs that a clean run would need to clean up
function cleanup_glance() {
    # kill instances (nova)
    # delete image files (glance)
    # This function intentionally left blank
    :
}

# configure_glanceclient() - Set config files, create data dirs, etc
function configure_glanceclient() {
    setup_develop $GLANCECLIENT_DIR
}

# configure_glance() - Set config files, create data dirs, etc
function configure_glance_old() {
    setup_develop $GLANCE_DIR

    if [[ ! -d $GLANCE_CONF_DIR ]]; then
        sudo mkdir -p $GLANCE_CONF_DIR
    fi
    sudo chown `whoami`:`whoami` $GLANCE_CONF_DIR -R

    # Copy over our glance configurations and update them
    cp $GLANCE_DIR/etc/glance-registry.conf $GLANCE_REGISTRY_CONF
    iniset $GLANCE_REGISTRY_CONF DEFAULT debug True
    inicomment $GLANCE_REGISTRY_CONF DEFAULT log_file
    iniset $GLANCE_REGISTRY_CONF DEFAULT sql_connection $BASE_SQL_CONN/glance?charset=utf8
    iniset $GLANCE_REGISTRY_CONF DEFAULT use_syslog $SYSLOG
    iniset $GLANCE_REGISTRY_CONF paste_deploy flavor keystone
    iniset $GLANCE_REGISTRY_CONF keystone_authtoken auth_host $KEYSTONE_AUTH_HOST
    iniset $GLANCE_REGISTRY_CONF keystone_authtoken auth_port $KEYSTONE_AUTH_PORT
    iniset $GLANCE_REGISTRY_CONF keystone_authtoken auth_protocol $KEYSTONE_AUTH_PROTOCOL
    iniset $GLANCE_REGISTRY_CONF keystone_authtoken auth_uri $KEYSTONE_SERVICE_PROTOCOL://$KEYSTONE_SERVICE_HOST:$KEYSTONE_SERVICE_PORT/
    iniset $GLANCE_REGISTRY_CONF keystone_authtoken admin_tenant_name $SERVICE_TENANT_NAME
    iniset $GLANCE_REGISTRY_CONF keystone_authtoken admin_user glance
    iniset $GLANCE_REGISTRY_CONF keystone_authtoken admin_password $SERVICE_PASSWORD

    cp $GLANCE_DIR/etc/glance-api.conf $GLANCE_API_CONF
    iniset $GLANCE_API_CONF DEFAULT debug True
    inicomment $GLANCE_API_CONF DEFAULT log_file
    iniset $GLANCE_API_CONF DEFAULT sql_connection $BASE_SQL_CONN/glance?charset=utf8
    iniset $GLANCE_API_CONF DEFAULT use_syslog $SYSLOG
    iniset $GLANCE_API_CONF DEFAULT filesystem_store_datadir $GLANCE_IMAGE_DIR/
    iniset $GLANCE_API_CONF DEFAULT image_cache_dir $GLANCE_CACHE_DIR/
    iniset $GLANCE_API_CONF paste_deploy flavor $GLANCE_API_FLAVOR
    iniset $GLANCE_API_CONF keystone_authtoken auth_host $KEYSTONE_AUTH_HOST
    iniset $GLANCE_API_CONF keystone_authtoken auth_port $KEYSTONE_AUTH_PORT
    iniset $GLANCE_API_CONF keystone_authtoken auth_protocol $KEYSTONE_AUTH_PROTOCOL
    iniset $GLANCE_API_CONF keystone_authtoken auth_uri $KEYSTONE_SERVICE_PROTOCOL://$KEYSTONE_SERVICE_HOST:$KEYSTONE_SERVICE_PORT/
    iniset $GLANCE_API_CONF keystone_authtoken admin_tenant_name $SERVICE_TENANT_NAME
    iniset $GLANCE_API_CONF keystone_authtoken admin_user glance
    iniset $GLANCE_API_CONF keystone_authtoken admin_password $SERVICE_PASSWORD
    iniset $GLANCE_API_CONF DEFAULT registry_host $GLANCE_REGISTRY_HOST
    iniset $GLANCE_API_CONF DEFAULT registry_port $GLANCE_REGISTRY_PORT
    iniset $GLANCE_API_CONF DEFAULT image_cache_max_size $GLANCE_CACHE_MAX_SIZE

    if is_service_enabled qpid; then
        iniset $GLANCE_API_CONF DEFAULT notifier_strategy qpid
    elif [ -n "$RABBIT_HOST" ] &&  [ -n "$RABBIT_PASSWORD" ]; then
        iniset $GLANCE_API_CONF DEFAULT notifier_strategy rabbit
        iniset $GLANCE_API_CONF DEFAULT rabbit_host $RABBIT_HOST
        iniset $GLANCE_API_CONF DEFAULT rabbit_password $RABBIT_PASSWORD
    fi

    cp -p $GLANCE_DIR/etc/glance-registry-paste.ini $GLANCE_REGISTRY_PASTE_INI

    iniset $GLANCE_REGISTRY_PASTE_INI filter:authtoken auth_host $GLANCE_REGISTRY_AUTH_HOST
    iniset $GLANCE_REGISTRY_PASTE_INI filter:authtoken auth_port $GLANCE_REGISTRY_AUTH_PORT
    iniset $GLANCE_REGISTRY_PASTE_INI filter:authtoken auth_protocol $KEYSTONE_AUTH_PROTOCOL
    iniset $GLANCE_REGISTRY_PASTE_INI filter:authtoken auth_uri $KEYSTONE_SERVICE_PROTOCOL://$GLANCE_REGISTRY_AUTH_HOST:$KEYSTONE_SERVICE_PORT/
    iniset $GLANCE_REGISTRY_PASTE_INI filter:authtoken admin_tenant_name $SERVICE_TENANT_NAME
    iniset $GLANCE_REGISTRY_PASTE_INI filter:authtoken admin_user glance
    iniset $GLANCE_REGISTRY_PASTE_INI filter:authtoken admin_password $SERVICE_PASSWORD

    cp -p $GLANCE_DIR/etc/glance-api-paste.ini $GLANCE_API_PASTE_INI

    cp $GLANCE_DIR/etc/glance-cache.conf $GLANCE_CACHE_CONF
    iniset $GLANCE_CACHE_CONF DEFAULT debug True
    inicomment $GLANCE_CACHE_CONF DEFAULT log_file
    iniset $GLANCE_CACHE_CONF DEFAULT use_syslog $SYSLOG
    iniset $GLANCE_CACHE_CONF DEFAULT filesystem_store_datadir $GLANCE_IMAGE_DIR/
    iniset $GLANCE_CACHE_CONF DEFAULT image_cache_dir $GLANCE_CACHE_DIR/
    iniuncomment $GLANCE_CACHE_CONF DEFAULT auth_url
    iniset $GLANCE_CACHE_CONF DEFAULT auth_url $KEYSTONE_AUTH_PROTOCOL://$KEYSTONE_AUTH_HOST:$KEYSTONE_AUTH_PORT/v2.0
    iniuncomment $GLANCE_CACHE_CONF DEFAULT auth_tenant_name
    iniset $GLANCE_CACHE_CONF DEFAULT admin_tenant_name $SERVICE_TENANT_NAME
    iniuncomment $GLANCE_CACHE_CONF DEFAULT auth_user
    iniset $GLANCE_CACHE_CONF DEFAULT admin_user glance
    iniuncomment $GLANCE_CACHE_CONF DEFAULT auth_password
    iniset $GLANCE_CACHE_CONF DEFAULT admin_password $SERVICE_PASSWORD

    cp -p $GLANCE_DIR/etc/policy.json $GLANCE_POLICY_JSON
    if [ "$GLANCE_API_FLAVOR" == "keystone+cachemanagement" ]; then
        echo "PATH=""$PATH" > cronTemp 
        echo "*""$GLANCE_CACHE_PRUNER_INTERVAL"" * * * * glance-cache-pruner --config-file=""$GLANCE_API_CONF" >> cronTemp
        echo "*""$GLANCE_CACHE_CLEANER_INTERVAL"" * * * * glance-cache-cleaner --config-file=""$GLANCE_API_CONF" >> cronTemp
	sudo crontab cronTemp
        rm cronTemp
    fi

}

# init_glance() - Initialize databases, etc.
function init_glance() {
    # Delete existing images
    rm -rf $GLANCE_IMAGE_DIR
    mkdir -p $GLANCE_IMAGE_DIR
    sudo chown `whoami`:`whoami` $GLANCE_IMAGE_DIR -R

    # Delete existing cache
    rm -rf $GLANCE_CACHE_DIR
    mkdir -p $GLANCE_CACHE_DIR
    sudo chown `whoami`:`whoami` $GLANCE_CACHE_DIR -R

    # (re)create glance database
    mysql -u$MYSQL_USER -p$MYSQL_PASSWORD -e 'DROP DATABASE IF EXISTS glance;'
    mysql -u$MYSQL_USER -p$MYSQL_PASSWORD -e 'CREATE DATABASE glance CHARACTER SET utf8;'

    $GLANCE_BIN_DIR/glance-manage db_sync
}

# install_glanceclient() - Collect source and prepare
function install_glanceclient() {
    git_clone $GLANCECLIENT_REPO $GLANCECLIENT_DIR $GLANCECLIENT_BRANCH
}

# install_glance() - Collect source and prepare
function install_glance() {
    git_clone $GLANCE_REPO $GLANCE_DIR $GLANCE_BRANCH
}

# start_glance() - Start running processes, including screen
function start_glance() {
    # launch the glance registry service
    if is_service_enabled g-reg; then
       screen_it g-reg "cd $GLANCE_DIR; $GLANCE_BIN_DIR/glance-registry --config-file=$GLANCE_CONF_DIR/glance-registry.conf"
    fi

    # launch the glance api and wait for it to answer before continuing
    if is_service_enabled g-api; then
       screen_it g-api "cd $GLANCE_DIR; sudo $GLANCE_BIN_DIR/glance-api --config-file=$GLANCE_CONF_DIR/glance-api.conf"
       echo "Waiting for g-api ($GLANCE_HOSTPORT) to start..."
       if ! timeout $SERVICE_TIMEOUT sh -c "while ! http_proxy= wget -q -O- http://$GLANCE_HOSTPORT; do sleep 1; done"; then
          echo "g-api did not start"
          exit 1
       fi
    fi
}

# stop_glance() - Stop running processes
function stop_glance() {
    # Kill the Glance screen windows
    screen -S $SCREEN_NAME -p g-api -X kill
    screen -S $SCREEN_NAME -p g-reg -X kill
}

function configure_glance() {
    setup_develop $GLANCE_DIR

    if [[ ! -d $GLANCE_CONF_DIR ]]; then
        sudo mkdir -p $GLANCE_CONF_DIR
    fi
    sudo chown `whoami`:`whoami` $GLANCE_CONF_DIR -R

    if is_service_enabled g-reg; then
        GLANCE_IMAGE_DIR=$DEST/glance/images
        # Delete existing images
        rm -rf $GLANCE_IMAGE_DIR

        # Use local glance directories
        mkdir -p $GLANCE_IMAGE_DIR
        sudo chown `whoami`:`whoami` $GLANCE_IMAGE_DIR -R

        # Copy over our glance configurations and update them
        GLANCE_REGISTRY_CONF=$GLANCE_CONF_DIR/glance-registry.conf
        cp $GLANCE_DIR/etc/glance-registry.conf $GLANCE_REGISTRY_CONF
        iniset $GLANCE_REGISTRY_CONF DEFAULT debug True
        inicomment $GLANCE_REGISTRY_CONF DEFAULT log_file
        iniset $GLANCE_REGISTRY_CONF DEFAULT sql_connection $BASE_SQL_CONN/glance?charset=utf8
        iniset $GLANCE_REGISTRY_CONF DEFAULT use_syslog $SYSLOG
        iniset $GLANCE_REGISTRY_CONF paste_deploy flavor keystone

        if [ -z "$GLANCE_REGISTRY_AUTH_HOST" ]; then
           GLANCE_REGISTRY_AUTH_HOST = $KEYSTONE_AUTH_HOST
        fi
        if [ -z "$GLANCE_REGISTRY_AUTH_PORT" ]; then
           GLANCE_REGISTRY_AUTH_PORT = $KEYSTONE_AUTH_PORT
        fi

        GLANCE_REGISTRY_PASTE_INI=$GLANCE_CONF_DIR/glance-registry-paste.ini
        cp $GLANCE_DIR/etc/glance-registry-paste.ini $GLANCE_REGISTRY_PASTE_INI
        iniset $GLANCE_REGISTRY_PASTE_INI filter:authtoken auth_host $GLANCE_REGISTRY_AUTH_HOST
        iniset $GLANCE_REGISTRY_PASTE_INI filter:authtoken auth_port $GLANCE_REGISTRY_AUTH_PORT
        iniset $GLANCE_REGISTRY_PASTE_INI filter:authtoken auth_protocol $KEYSTONE_AUTH_PROTOCOL
        iniset $GLANCE_REGISTRY_PASTE_INI filter:authtoken auth_uri $KEYSTONE_SERVICE_PROTOCOL://$GLANCE_REGISTRY_AUTH_HOST:$KEYSTONE_SERVICE_PORT/
        iniset $GLANCE_REGISTRY_PASTE_INI filter:authtoken admin_tenant_name $SERVICE_TENANT_NAME
        iniset $GLANCE_REGISTRY_PASTE_INI filter:authtoken admin_user glance
        iniset $GLANCE_REGISTRY_PASTE_INI filter:authtoken admin_password $SERVICE_PASSWORD
    fi
    if is_service_enabled g-api; then
        GLANCE_API_CONF=$GLANCE_CONF_DIR/glance-api.conf
        cp $GLANCE_DIR/etc/glance-api.conf $GLANCE_API_CONF
        iniset $GLANCE_API_CONF DEFAULT debug True
        inicomment $GLANCE_API_CONF DEFAULT log_file
        iniset $GLANCE_API_CONF DEFAULT sql_connection $BASE_SQL_CONN/glance?charset=utf8
        iniset $GLANCE_API_CONF DEFAULT use_syslog $SYSLOG
        iniset $GLANCE_API_CONF DEFAULT filesystem_store_datadir $GLANCE_IMAGE_DIR/
        iniset $GLANCE_API_CONF paste_deploy flavor $GLANCE_API_FLAVOR
        iniset $GLANCE_API_CONF DEFAULT registry_host $GLANCE_REGISTRY_HOST
        iniset $GLANCE_API_CONF DEFAULT registry_port $GLANCE_REGISTRY_PORT
        iniset $GLANCE_API_CONF DEFAULT image_cache_max_size $GLANCE_CACHE_MAX_SIZE
        
        if [ "$GLANCE_API_FLAVOR" == "keystone+cachemanagement" ]; then
           echo "PATH=""$PATH" > cronTemp
           echo "*""$GLANCE_CACHE_PRUNER_INTERVAL"" * * * * glance-cache-pruner --config-file=""$GLANCE_API_CONF" >> cronTemp
           echo "*""$GLANCE_CACHE_CLEANER_INTERVAL"" * * * * glance-cache-cleaner --config-file=""$GLANCE_API_CONF" >> cronTemp
           crontab cronTemp
           rm cronTemp
        fi
        if [ -z "$GLANCE_API_AUTH_HOST" ]; then
           GLANCE_API_AUTH_HOST=$KEYSTONE_AUTH_HOST
        fi
        if [ -z "$GLANCE_API_AUTH_PORT" ]; then
           GLANCE_API_AUTH_PORT=$KEYSTONE_AUTH_PORT
        fi

        # Store the images in swift if enabled.
        if is_service_enabled swift; then
            iniset $GLANCE_API_CONF DEFAULT default_store swift
            iniset $GLANCE_API_CONF DEFAULT swift_store_auth_address $KEYSTONE_SERVICE_PROTOCOL://$GLANCE_API_AUTH_HOST:$KEYSTONE_SERVICE_PORT/v2.0/
            iniset $GLANCE_API_CONF DEFAULT swift_store_user $SERVICE_TENANT_NAME:glance
            iniset $GLANCE_API_CONF DEFAULT swift_store_key $SERVICE_PASSWORD
            iniset $GLANCE_API_CONF DEFAULT swift_store_region $REGION_NAME
            iniset $GLANCE_API_CONF DEFAULT swift_store_create_container_on_put True
            iniset $GLANCE_API_CONF DEFAULT swift_store_large_object_size 1120
        fi
        GLANCE_API_PASTE_INI=$GLANCE_CONF_DIR/glance-api-paste.ini
        cp $GLANCE_DIR/etc/glance-api-paste.ini $GLANCE_API_PASTE_INI
        iniset $GLANCE_API_PASTE_INI filter:authtoken auth_host $GLANCE_API_AUTH_HOST
        iniset $GLANCE_API_PASTE_INI filter:authtoken auth_port $GLANCE_API_AUTH_PORT
        iniset $GLANCE_API_PASTE_INI filter:authtoken auth_protocol $KEYSTONE_AUTH_PROTOCOL
        iniset $GLANCE_API_PASTE_INI filter:authtoken auth_uri $KEYSTONE_SERVICE_PROTOCOL://$GLANCE_API_AUTH_HOST:$KEYSTONE_SERVICE_PORT/
        iniset $GLANCE_API_PASTE_INI filter:authtoken admin_tenant_name $SERVICE_TENANT_NAME
        iniset $GLANCE_API_PASTE_INI filter:authtoken admin_user glance
        iniset $GLANCE_API_PASTE_INI filter:authtoken admin_password $SERVICE_PASSWORD
    fi

    GLANCE_POLICY_JSON=$GLANCE_CONF_DIR/policy.json
    cp $GLANCE_DIR/etc/policy.json $GLANCE_POLICY_JSON
}

# Restore xtrace
$XTRACE
